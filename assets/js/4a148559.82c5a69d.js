"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[40],{8352:function(e,n,i){i.r(n),i.d(n,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return d},toc:function(){return m},default:function(){return p}});var t=i(7462),o=i(3366),a=(i(7294),i(3905)),r=["components"],l={id:"faq",title:"FAQ"},s=void 0,d={unversionedId:"guide/faq",id:"guide/faq",isDocsHomePage:!1,title:"FAQ",description:"Why can't I pass in name, value, error etc. into my component?",source:"@site/docs/guide/faq.md",sourceDirName:"guide",slug:"/guide/faq",permalink:"/formik-mui/docs/guide/faq",editUrl:"https://github.com/stackworx/formik-mui/edit/main/docs/guide/faq.md",tags:[],version:"current",frontMatter:{id:"faq",title:"FAQ"},sidebar:"someSidebar",previous:{title:"Migrating",permalink:"/formik-mui/docs/guide/migrating"},next:{title:"MUI",permalink:"/formik-mui/docs/api/mui"}},m=[{value:"Why can&#39;t I pass in <code>name</code>, <code>value</code>, <code>error</code> etc. into my component?",id:"why-cant-i-pass-in-name-value-error-etc-into-my-component",children:[],level:2},{value:"Why does a wrapper for a certain component not exist?",id:"why-does-a-wrapper-for-a-certain-component-not-exist",children:[],level:2},{value:"Why do the fields become disabled during submission?",id:"why-do-the-fields-become-disabled-during-submission",children:[],level:2}],u={toc:m};function p(e){var n=e.components,i=(0,o.Z)(e,r);return(0,a.kt)("wrapper",(0,t.Z)({},u,i,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"why-cant-i-pass-in-name-value-error-etc-into-my-component"},"Why can't I pass in ",(0,a.kt)("inlineCode",{parentName:"h2"},"name"),", ",(0,a.kt)("inlineCode",{parentName:"h2"},"value"),", ",(0,a.kt)("inlineCode",{parentName:"h2"},"error")," etc. into my component?"),(0,a.kt)("p",null,"To prevent 2 sources of truth for values. For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'function App() {\n  const [email, setEmail] = useState(\'\');\n  const [error, setError] = useState(null);\n\n  return (\n    <Field\n      component={TextField}\n      name="email"\n      type="email"\n      label="Email"\n      value={email}\n      error={error}\n      disabled={isSubmitting}\n    />\n  );\n}\n')),(0,a.kt)("p",null,"From this code it is not obvious at all who is in control of the state. Therefore, we purposefully hand over all control (",(0,a.kt)("inlineCode",{parentName:"p"},"name"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"value"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"onChange"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"onBlur"),") to Formik. This ensures there is no confusion. You can do this to a custom field:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import TextField from '@mui/material/TextField';\nimport { Field } from 'formik';\nimport { fieldToTextField, TextFieldProps } from 'formik-mui';\n\nfunction UpperCasingTextField(props: TextFieldProps) {\n  const {\n    form: { setFieldValue },\n    field: { name },\n  } = props;\n  const onChange = React.useCallback(\n    (event) => {\n      const { value } = event.target;\n      setFieldValue(name, value ? value.toUpperCase() : '');\n    },\n    [setFieldValue, name]\n  );\n  return <TextField {...fieldToTextField(props)} onChange={onChange} />;\n}\n")),(0,a.kt)("h2",{id:"why-does-a-wrapper-for-a-certain-component-not-exist"},"Why does a wrapper for a certain component not exist?"),(0,a.kt)("p",null,"Some components require many decisions to be made which would only make it work in some situations.\nA good example is the ",(0,a.kt)("inlineCode",{parentName:"p"},"slider"),". Should the ",(0,a.kt)("inlineCode",{parentName:"p"},"onChange")," event be fired while dragging or only when it's dropped? It depends on your use-case."),(0,a.kt)("h2",{id:"why-do-the-fields-become-disabled-during-submission"},"Why do the fields become disabled during submission?"),(0,a.kt)("p",null,"This is a convenience meant for the standard form. If this was omitted the ",(0,a.kt)("inlineCode",{parentName:"p"},"isSubmitting")," property would have to be manually passed into every single field like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"{8}","{8}":!0},'<Formik>\n  {({ isSubmitting }) => (\n    <Form>\n      <TextField\n        name="email"\n        type="email"\n        label="Email"\n        disabled={isSubmitting}\n      />\n    </Form>\n  )}\n</Formik>\n')),(0,a.kt)("p",null,"A common scenario where this is problematic is when we use Formik for search. Here we never want the field to be disabled. This can be accomplished by setting disabled to ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"{4}","{4}":!0},'<Formik>\n  {({ isSubmitting }) => (\n    <Form>\n      <TextField name="email" type="email" label="Email" disabled={false} />\n    </Form>\n  )}\n</Formik>\n')))}p.isMDXComponent=!0}}]);